services:
  api-gateway:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    env_file:
      - apps/api-gateway/.env.test
    ports:
      - '3002:3001'
    volumes:
      - ./apps:/usr/src/app/apps
      - ./libs:/usr/src/app/libs
      - ./e2e:/usr/src/app/e2e
    depends_on:
      postgres-files:
        condition: service_healthy
      postgres-auth:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  auth:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    env_file:
      - apps/auth/.env.test
    volumes:
      - ./apps/auth:/usr/src/app/apps/auth
      - ./libs:/usr/src/app/libs
    depends_on:
      postgres-auth:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  files:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/files/Dockerfile
    env_file:
      - apps/files/.env.test
    volumes:
      - ./apps/files:/usr/src/app/apps/files
      - ./libs:/usr/src/app/libs
    depends_on:
      postgres-files:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  antivirus:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/antivirus/Dockerfile
    env_file:
      - apps/antivirus/.env.test
    volumes:
      - ./apps/antivirus:/usr/src/app/apps/antivirus
      - ./libs:/usr/src/app/libs
    depends_on:
      postgres-files:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  postgres-files:
    image: postgres:latest
    container_name: postgres-files
    env_file:
      - apps/files/.env.test
    environment:
      POSTGRES_USER: ${POSTGRES_FILES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_FILES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_FILES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5555:5432"
    volumes:
      - ./pg_hba.conf:/var/lib/postgresql/data/pgdata/pg_hba.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_FILES_USER} -d ${POSTGRES_FILES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    tty: true
    stdin_open: true
  postgres-auth:
    image: postgres:latest
    container_name: postgres-auth
    env_file:
      - apps/auth/.env.test
    environment:
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5454:5432"
    volumes:
      - ./pg_hba.conf:/var/lib/postgresql/data/pgdata/pg_hba.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_AUTH_USER} -d ${POSTGRES_AUTH_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    tty: true
    stdin_open: true
  rabbitmq:
    image: rabbitmq:4.1.0-management
    hostname: rabbitmq
    restart: always
    env_file:
      - .env.test
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - '15673:15672'
      - '5673:5672'
    healthcheck:
      test: [ 'CMD', 'rabbitmq-diagnostics', 'ping' ]
      interval: 5s
      timeout: 3s
      retries: 3
  clamav:
    image: mkodockx/docker-clamav:alpine
    container_name: clamav
    ports:
      - '3310:3310'
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo PING | nc -w 1 127.0.0.1 3310 | grep PONG" ]
      interval: 5s
      timeout: 3s
      retries: 20

volumes:
  pgdata-auth-test:
    driver: local
  pgdata-files-test:
    driver: local
  rabbitmq:
    driver: local
