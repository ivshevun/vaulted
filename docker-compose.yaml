services:
  api-gateway:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    env_file:
      - apps/api-gateway/.env
    ports:
      - '3001:3001'
    volumes:
      - ./apps:/usr/src/app/apps
      - ./libs:/usr/src/app/libs
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres-auth:
        condition: service_healthy
      postgres-files:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  auth:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    env_file:
      - apps/auth/.env
    volumes:
      - ./apps/auth:/usr/src/app/apps/auth
      - ./libs:/usr/src/app/libs
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres-auth:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  files:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/files/Dockerfile
    env_file:
      - apps/files/.env
    volumes:
      - ./apps/files:/usr/src/app/apps/files
      - ./libs:/usr/src/app/libs
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres-files:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  antivirus:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./apps/antivirus/Dockerfile
    env_file:
      - apps/antivirus/.env
    volumes:
      - ./apps/antivirus:/usr/src/app/apps/antivirus
      - ./libs:/usr/src/app/libs
      - ./prisma:/usr/src/app/prisma
    depends_on:
      postgres-files:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      clamav:
        condition: service_healthy
  postgres-files:
    image: postgres:latest
    container_name: postgres-files
    env_file:
      - apps/files/.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata-files:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    tty: true
    stdin_open: true
  postgres-auth:
    image: postgres:latest
    container_name: postgres-auth
    env_file:
      - apps/auth/.env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata-auth:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    tty: true
    stdin_open: true
  rabbitmq:
    image: rabbitmq:4.1.0-management
    hostname: rabbitmq
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3
  clamav:
    image: mkodockx/docker-clamav:alpine
    container_name: clamav
    ports:
      - "3310:3310"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "clamdscan", "--version" ]
      interval: 5s
      timeout: 3s
      retries: 3

volumes:
  pgdata-auth:
    driver: local
  pgdata-files:
    driver: local
  rabbitmq:
    driver: local